
<!DOCTYPE html>
<!--suppress ALL -->
<html lang="en">
<head>
    <meta charset="UTF-8">

    <title>Title</title>
    <!-- Bootstrap -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@3.3.7/dist/css/bootstrap.min.css" rel="stylesheet">
    <style type="text/css">

        .pic {
            display: flex;
            flex-direction: row;
            justify-content: space-around;
            margin: 10px;
            align-items: center;
            border: blue 5px solid;
        }

        .dropdown {
            display: inline-block;
            position: relative;
            border: blue 1px dot-dash;
        }

        .dropdowncontent {
            display: none;
            position: absolute;
            background-color: antiquewhite;
            min-width: 160px;
        }

        .dropdown:hover .dropdowncontent {
            display: flex;
            flex-direction: column;
            justify-content: flex-start;
        }

        .dropdowncontent a {
            display: block;
            min-width: 100px;
            min-height: 46px;
            text-align: center;
            border: 1px saddlebrown dot-dash;
            padding: 2px;
        }

        ul {
            list-style: none;
        }

        #joke {
            display: flex;
            flex-direction: row;
            flex-wrap: wrap;

        }

        div {
            display: flex;
            border: black 1px dashed;
        }

        .joke {
            display: flex;
            flex: 1;
            align-self: center;
            flex-direction: column;
        }

        .joke .header {
            display: flex;
            flex-direction: row;
            justify-content: space-evenly;
        }

        /*.joke div:first-child {*/
        /*align-self: center;*/
        /*justify-content: space-around;*/
        /*flex: 1;*/
        /*}*/
        .header > div {
            display: inline-block;
            min-width: 300px;
            text-align: center;
            border: aqua 3px solid;
        }

        .jokeitem {
            display: flex;
            flex-direction: column;
            justify-content: center;
            flex-wrap: nowrap;
            flex: 1;
            border: aqua solid 1px;

        }

        .jokeitem:hover {
            background: antiquewhite;
        }

        .jokeitem div {
            display: flex;
            flex-wrap: wrap;
        }

        a, div {
            display: inline-block;
        }

        .jokeheader {
            display: flex;
            justify-content: flex-start;
            align-items: flex-start;
            flex-direction: row;
        }

        .jokefoot {
            display: flex;
            align-items: center;
            flex-direction: row;
            justify-content: flex-end;

        }

        .jokefoot > span {
            min-width: 100px;
            text-align: center;
        }

        div {
            display: flex;
            flex-direction: column;
        }
    </style>
</head>
<body>
<div id="example"></div>

<div id="joke"></div>


<div class="topic">
    <div class="user">
        <label>用户:</label>
        <label>主题内容：</label>
    </div>
    <div class="comments">
        <ul>
            <li>
                <div>
                    <label>form:...</label> To <label>to...</label>
                </div>
            </li>
        </ul>
    </div>
</div>

// 内容评论
<form>
    <div>
        <input name="fromId" placeholder="输入您的ID">
        <input name="toId" placeholder="被评论的ID">
        <input name="content" placeholder="评论的内容">
        <button type="submit">评论</button>
    </div>
</form>
//主题评论
<form action="">
    <div>
        <input name="fromId" placeholder="输入您的ID">
        <input name="toId" placeholder="被评论的主题ID">
        <input name="content" placeholder="评论的内容">
        <button type="submit">评论</button>
    </div>
</form>

<script type="text/javascript">
    function onc() {
        var files = document.getElementById("input").files;
        for (var i = 0; i < files.length; i++) {
            // alert(input.files[i].innerHTML);
        }
    }
</script>
<form action="/example/html5/demo_form.asp" method="get">
    选择图片：<input type="file" id="input" name="input" onchange="onc()" multiple="multiple"/>
    <input type="submit"/>
</form>
<p>请尝试在浏览文件时选取一个以上的文件。</p>
<div id="gist"></div>
<div id="bootstrap"></div>

<script type="text/babel">
    class Clock extends React.Component {
        constructor(props) {
            super(props);
            this.state = {
                date: null,
                msg: "Msg"
            }
            // this.state = {date: new Date()};
        }

        componentDidMount() {
            this.setState({date: new Date(), msg: 'componentDidMount'})
        }

        render() {
            return (
                <div>
                    <h1>{this.props.msg}</h1>
                    <h2>现在是{this.props.date.toLocaleTimeString()}</h2>
                </div>
            );
        }
    }

    Clock.propTypes = {
        msg: PropTypes.string,
        date: PropTypes.date
    };
    //设置默认的属性的值
    // defaultProps 比 constructor的state优先级高
    Clock.defaultProps = {
        date: new Date(),
        msg: "Hello"
    };

    function tick() {
        ReactDOM.render(
            <Clock date={new Date()}/>,
            document.getElementById('example')
        );
    }

    setInterval(tick, 1000);
</script>
<script type="text/babel">
    class Bootstrap extends React.Component {
        constructor(props) {
            super(props);
            this.cc = this.cc.bind(this);
        }

        render() {
            return (<div>
                <div className="dropdown">
                    <h2>{this.props.title}</h2>

                    <div className="dropdowncontent">
                        <ul>
                            {this.lirender(this.props.subs)}
                        </ul>
                    </div>
                </div>
            </div>);
        }

        cc(event) {
            console.log(event.target.innerHTML);

            this.props.headerBack(event.target.innerHTML);
        }

        lirender(lis) {
            return lis.map((item) => (<li role="separator" onClick={this.cc}><a>{item} </a></li>));
        }
    }

    // ReactDOM.render(
    //     <Bootstrap/>,
    //     document.getElementById('bootstrap')
    // );
</script>

<script type="text/babel">
    class UserGist extends React.Component {
        constructor(props) {
            super(props);
            this.state = {username: '', lastGistUrl: ''};
        }


        componentDidMount() {
            this.serverRequest = $.get(this.props.source, function (result) {
                var lastGist = result[0];
                this.setState({
                    username: lastGist.owner.login,
                    lastGistUrl: lastGist.html_url
                });
            }.bind(this));
        }

        componentWillUnmount() {
            this.serverRequest.abort();
        }

        render() {
            return (
                <div>
                    <h1>   {this.state.username} 用户最新的 Gist 共享地址：</h1>
                    <a href={this.state.lastGistUrl}>{this.state.lastGistUrl}</a>
                </div>
            );
        }
    }

    ReactDOM.render(
        <UserGist source="https://api.github.com/users/octocat"/>,
        document.getElementById('gist')
    );
</script>
<script type="text/babel">

    class Joke extends React.Component {
        constructor(props) {
            super(props);
            this.state = {
                url: "https://www.apiopen.top/satinGodApi",
                type: this.props.type,
                page: this.props.page,
                jokes: []
            }
        }



        renderItem(item) {
            return (
                <div class="jokeitem">
                    <div>
                        <a href={item.header}>
                            <img src={item.header} width="40px" height="40px"/>
                        </a>
                        <span className="badge">{item.username}</span>

                    </div>
                    <div>

                        <h3>{item.text}</h3>
                        {item.type === "video" ? <video poster={item.image} src={item.video} controls="controls">
                            your browser does not support the video tag
                        </video> : item.video}

                        {item.type === "image" ? <img alt={item.text} src={item.image}/> : ""}
                        {item.type === "gif" ? <img src={item.gif}/> : ""}

                    </div>


                    <div class="jokefoot">
                        <span className="badge">{item.passtime}</span>
                        <span className="glyphicon glyphicon-thumbs-down"><span
                            className="badge">{item.down}</span></span>
                        <span className="glyphicon glyphicon-thumbs-up"><span className="badge">{item.up}</span></span>
                        <span className="glyphicon glyphicon-share-alt"><span
                            className="badge">{item.forward}</span></span>
                    </div>

                </div>

            );

        }

        changeType(type) {
            this.setSate({type: type});

        }

        changePage(page) {
            this.setSate({page: page});

        }

        componentDidMount() {
            // componentWillMount(){
            //     this.setSate({jokes: []});
            this.fetch();

        }


        fetch() {
            var uri = this.state.url + "?type=" + this.props.type + "&page=" + this.props.page;
            // alert(uri);
            this.serverRequest = $.get(uri, function (result) {
                var jokesJsonItem = result.data;
                var tempThis = this;
                var jsokes = jokesJsonItem.map((item) =>
                    tempThis.renderItem(item)
                );

                this.setState({
                    jokes: jsokes
                });
            }.bind(this))
        }

        render() {
            var uri = this.state.url + "?type=" + this.props.type + "&page=" + this.props.page;
            console.log(uri);

            console.log(this.state.jokes.length)
            return (<div>{uri}{this.state.jokes}</div>);
        }
    }

    class JokeContainer extends React.Component {
        constructor(props) {
            super(props);
            this.state = {
                type: 0,
                page: 1
            }
        }

        typeSelected(item) {
            this.setState({type: item});
            this.refs.refres.fetch();
        }


        pageSelected(page) {
            this.setState({page: page});
            this.refs.refres.fetch();
        }


        render() {
            console.log("render");
            return (
                <div className="joke">
                    <div className="header">
                        {<Bootstrap title="类型" headerBack={this.typeSelected.bind(this)}
                                    subs={["0", "1", "2", "3", "4"]}/>}
                        {<Bootstrap title="页码" headerBack={this.pageSelected.bind(this)} subs={[0, 1, 2, 3]}/>}
                    </div>
                    {<Joke ref="refres" type={this.state.type} page={this.state.page}/>}
                </div>
            );
        }
    }

    Bootstrap.defaultProps = {
        // title: "了",
        // subs: [1, 2, 3],


    }

    class JokeHeader extends React.Component {
        render() {
            return (
                <div className="header">
                    {<Bootstrap title="类型" subs={["0", "1"]}/>}
                    {<Bootstrap title="页码" subs={[0, 1, 2, 3]}/>}

                </div>
            );
        }
    }


    ReactDOM.render(
        <JokeContainer/>,
        document.getElementById('joke')
    );

</script>
<script type="text/javascript"></script>
<script src="https://unpkg.com/react@16/umd/react.production.min.js" crossorigin></script>
<script src="https://unpkg.com/react-dom@16/umd/react-dom.production.min.js" crossorigin></script>
<script src="https://unpkg.com/babel-standalone@6/babel.min.js"></script>
<script src="https://cdn.bootcss.com/prop-types/15.6.1/prop-types.js"></script>
<script src="https://cdn.staticfile.org/jquery/2.1.4/jquery.min.js"></script>
<!-- jQuery (Bootstrap 的所有 JavaScript 插件都依赖 jQuery，所以必须放在前边) -->
<script src="https://cdn.jsdelivr.net/npm/jquery@1.12.4/dist/jquery.min.js"></script>
<!-- 加载 Bootstrap 的所有 JavaScript 插件。你也可以根据需要只加载单个插件。 -->
<script src="https://cdn.jsdelivr.net/npm/bootstrap@3.3.7/dist/js/bootstrap.min.js"></script>
</body>

</body>
</html>
